AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lambda, api and base path mapping for manipulating person data

Metadata:
  AWS::ServerlessRepo::Application:
    Name: PersonData
    Description: Fetch person metadata by given parameters
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${CODEBUILD_RESOLVED_SOURCE_VERSION}', '${GIT_REPO}', '@${BUILD_TIMESTAMP}']

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowMethods: "'OPTIONS, GET, PUT, POST, DELETE'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: String
    Description: Reference to Cognito UserPool for the stage
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
  BareApiKey:
    Type: String
    Description: Key to access bare
    Default: '{{resolve:secretsmanager:bareApiKey:SecretString}}'
    NoEcho: true
  BareHost:
    Type: String
    Description: Address to bare

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  NvaBareProxyApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      Auth:
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !Ref CognitoAuthorizerArn
      EndpointConfiguration: Regional
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: NVA Bare Proxy
          version: '1.0'
        paths:
          /:
            get:
              summary:  Fetches authority by name, feideid
              parameters:
                - in: query
                  name: name
                  type: string
                  description: authors name (inverted).
                - in: query
                  name: feideid
                  type: string
                  description: feideid.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaBareFetchAuthorityFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: authority
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/fetchAuthorityResponseBody'
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '404':
                  description: Authority not found.
                  content:
                    application/json:
                      schema:
                        title: 404 Not found
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
            post:
              summary: Create authority
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/createAuthorityRequestBody'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaBareCreateAuthorityFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '201':
                  description: Authority created.
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/createAuthorityResponseBody'
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '401':
                  description: Unauthorized.
                  content:
                    application/json:
                      schema:
                        title: 401 Unathorized
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal Server Error.
                  content:
                    application/json:
                      schema:
                        title: 500 Internal Server Error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /{scn}:
            get:
              summary:  Fetches authority by uri (systemcontrolnumber)
              parameters:
                - in: path
                  name: scn
                  type: string
                  description: authors systemControlNumber (scn).
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaBareGetAuthorityByURIFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: authority
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/fetchAuthorityResponseBody'
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '404':
                  description: Authority not found.
                  content:
                    application/json:
                      schema:
                        title: 404 Not found
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /{scn}/identifiers/{qualifier}/add:
            post:
              summary: Adds an identifier to the authority identifier list.
              parameters:
                - in: path
                  name: scn
                  type: string
                  description: authors systemControlNumber (scn).
                - in: path
                  name: qualifier
                  type: string
                  description: qualifier of identifier to add.
              security:
                - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaBareAddNewIdentifierFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/addIdentifierRequestBody'
              responses:
                '200':
                  description: Identifier added to authority.
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/authorityResponseBody'
                '400':
                  description: Bad request.
                  schema:
                    $ref: '#/definitions/Problem'
                '500':
                  description: Internal server error.
                  schema:
                    $ref: '#/definitions/Problem'
          /{scn}/identifiers/{qualifier}/delete:
            delete:
              summary: Removes an identifier from the authority identifier list.
              parameters:
                - in: path
                  name: scn
                  type: string
                  description: authors systemControlNumber (scn).
                - in: path
                  name: qualifier
                  type: string
                  description: qualifier of identifier to add.
              security:
                - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaBareDeleteIdentifierFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/deleteIdentifierRequestBody'
              responses:
                '200':
                  description: Identifier removed from authority.
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/authorityResponseBody'
                '400':
                  description: Bad request.
                  schema:
                    $ref: '#/definitions/Problem'
                '500':
                  description: Internal server error.
                  schema:
                    $ref: '#/definitions/Problem'
          /{scn}/identifiers/{qualifier}/update:
            put:
              summary: Updates the value of an identifier in the authority identifier list.
              parameters:
                - in: path
                  name: scn
                  type: string
                  description: authors systemControlNumber (scn).
                - in: path
                  name: qualifier
                  type: string
                  description: qualifier of identifier to add.
              security:
                - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaBareUpdateIdentifierFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/updateIdentifierRequestBody'
              responses:
                '200':
                  description: Identifier updated in authority.
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/authorityResponseBody'
                '400':
                  description: Bad request.
                  schema:
                    $ref: '#/definitions/Problem'
                '500':
                  description: Internal server error.
                  schema:
                    $ref: '#/definitions/Problem'

        components:
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
          schemas:
            createAuthorityRequestBody:
              title: create authority
              type: object
              properties:
                invertedname:
                  type: string
                  description: Name of authority in inverted form (must contain comma)
              required:
                - invertedname

            addIdentifierRequestBody:
              title: Adds an identifier to the auhority
              type: object
              properties:
                identifier:
                  type: string
                  description: identifier

            deleteIdentifierRequestBody:
              title: Deletes an identifier from the auhority
              type: object
              properties:
                identifier:
                  type: string
                  description: identifier

            updateIdentifierRequestBody:
              title: Adds an identifier to the auhority
              type: object
              properties:
                identifier:
                  type: string
                  description: identifier
                updatedIdentifier:
                  type: string
                  description: updated identifier

            createAuthorityResponseBody:
              title: created authority
              type: object
              properties:
                name:
                  type: string
                  description: author name
                systemControlNumber:
                  type: string
                  description: systemControlNumber (scn)
                feideid:
                  type: object
                  description: list of feideids
                orcid:
                  type: object
                  description: list of orcids
                orgunitid:
                  type: object
                  description: list of orgunitids
                birthDate:
                  type: string
                  description: date associated with the author
                handle:
                  type: object
                  description: list of handles

            authorityResponseBody:
              title: updated authority
              type: object
              properties:
                name:
                  type: string
                  description: author name
                systemControlNumber:
                  type: string
                  description: systemControlNumber (scn)
                feideid:
                  type: object
                  description: list of feideids
                orcid:
                  type: object
                  description: list of orcids
                orgunitid:
                  type: object
                  description: list of orgunitids
                birthDate:
                  type: string
                  description: date associated with the author
                handle:
                  type: object
                  description: list of handles

            fetchAuthorityResponseBody:
              title: fetched authority
              type: object
              properties:
                name:
                  type: string
                  description: author name
                systemControlNumber:
                  type: string
                  description: systemControlNumber (scn)
                feideid:
                  type: object
                  description: list of feideids
                orcid:
                  type: object
                  description: list of orcids
                orgunitid:
                  type: object
                  description: list of orgunitids
                birthDate:
                  type: string
                  description: date associated with the author
                handle:
                  type: object
                  description: list of handles

            Problem:
              type: object
              properties:
                title:
                  type: string
                status:
                  type: integer
                detail:
                  type: string

  NvaBareFetchAuthorityFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          BARE_HOST: !Ref BareHost
          BARE_API_KEY: !Ref BareApiKey
          ALLOWED_ORIGIN:  '*'
          PERSON_AUTHORITY_BASE_ADDRESS: !Sub 'https://${CustomDomain}/${CustomDomainBasePath}/'
      Handler: no.unit.nva.bare.FetchAuthorityHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Events:
        NvaBareFetchEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref NvaBareProxyApi
            Path: /
            Method: get

  NvaBareGetAuthorityByURIFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          BARE_HOST: !Ref BareHost
          BARE_API_KEY: !Ref BareApiKey
          ALLOWED_ORIGIN:  '*'
          PERSON_AUTHORITY_BASE_ADDRESS: !Sub 'https://${CustomDomain}/${CustomDomainBasePath}/'
      Handler: no.unit.nva.bare.FetchAuthorityHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Events:
        NvaBareFetchEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref NvaBareProxyApi
            Path: /{scn}
            Method: get

  NvaBareAddNewIdentifierFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          BARE_HOST: !Ref BareHost
          BARE_API_KEY: !Ref BareApiKey
          ALLOWED_ORIGIN:  '*'
          PERSON_AUTHORITY_BASE_ADDRESS: !Sub 'https://${CustomDomain}/${CustomDomainBasePath}/'
      Handler: no.unit.nva.bare.AddNewAuthorityIdentifierHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Events:
        NvaBareAddNewIdentifierEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref NvaBareProxyApi
            Path: /{scn}/identifiers/{qualifier}/{identifier}
            Method: post

  NvaBareDeleteIdentifierFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          BARE_HOST: !Ref BareHost
          BARE_API_KEY: !Ref BareApiKey
          ALLOWED_ORIGIN:  '*'
          PERSON_AUTHORITY_BASE_ADDRESS: !Sub 'https://${CustomDomain}/${CustomDomainBasePath}/'
      Handler: no.unit.nva.bare.DeleteAuthorityIdentifierHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Events:
        NvaBareDeleteIdentifierEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref NvaBareProxyApi
            Path: /{scn}/identifiers/{qualifier}/delete
            Method: delete

  NvaBareUpdateIdentifierFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          BARE_HOST: !Ref BareHost
          BARE_API_KEY: !Ref BareApiKey
          ALLOWED_ORIGIN:  '*'
          PERSON_AUTHORITY_BASE_ADDRESS: !Sub 'https://${CustomDomain}/${CustomDomainBasePath}/'
      Handler: no.unit.nva.bare.UpdateAuthorityIdentifierHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Events:
        NvaBareUpdateIdentifierEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref NvaBareProxyApi
            Path: /{scn}/identifiers/{qualifier}/update
            Method: put

  NvaBareCreateAuthorityFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          BARE_HOST: !Ref BareHost
          BARE_API_KEY: !Ref BareApiKey
          ALLOWED_ORIGIN:  '*'
          PERSON_AUTHORITY_BASE_ADDRESS: !Sub 'https://${CustomDomain}/${CustomDomainBasePath}/'
      Handler: no.unit.nva.bare.CreateAuthorityHandler::handleRequest
      Runtime: java11
      MemorySize: 512
      Events:
        NvaBareCreateAuthorityEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref NvaBareProxyApi
            Path: /
            Method: post

  NvaBareProxyBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref NvaBareProxyApi
      Stage: !Ref NvaBareProxyApi.Stage

  #============================ Deploy API ============================================================================#
  # This solves the problem described here:
  # https://stackoverflow.com/questions/41423439/cloudformation-doesnt-deploy-to-api-gateway-stages-on-update
  #====================================================================================================================#

  ApiGatewayCreateDeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ApiGatewayAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${NvaBareProxyApi}/deployments'

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
  ApiGatewayCreateDeploymentLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt ApiGatewayCreateDeploymentLambdaRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import json, boto3
          import cfnresponse
          client = boto3.client('apigateway')
          def lambda_handler(event, context):
            responseData = {}
            responseStatus = cfnresponse.SUCCESS
            if event['RequestType'] == 'Update':
              try:
                properties = event['ResourceProperties']
                response = client.create_deployment(
                  restApiId=properties['RestApiId'],
                  stageName=properties['StageName'],
                  description='Deployed from Custom Resource'
                )
              except:
                responseStatus = cfnresponse.FAILED
            cfnresponse.send(event, context, responseStatus, responseData)
  ApiGatewayCreateDeploymentCustomResource:
    DependsOn: UploadApi
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ApiGatewayCreateDeploymentLambda.Arn
      RestApiId: !Ref NvaBareProxyApi
      StageName: !Ref NvaBareProxyApi.Stage
      Timestamp: '${BUILD_TIMESTAMP}'
      AuthorizerArn: !Ref CognitoAuthorizerArn